# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FlowGrapher', [dirname(__file__)])
        except ImportError:
            import _FlowGrapher
            return _FlowGrapher
        if fp is not None:
            try:
                _mod = imp.load_module('_FlowGrapher', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _FlowGrapher = swig_import_helper()
    del swig_import_helper
else:
    import _FlowGrapher
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    if method := class_type.__swig_setmethods__.get(name, None):
        return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError(f"You cannot add attributes to {self}")

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    if method := class_type.__swig_getmethods__.get(name, None):
        return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try:
        strthis = f"proxy of {self.this.__repr__()}"
    except: strthis = ""
    return f"<{self.__class__.__module__}.{self.__class__.__name__}; {strthis} >"

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class POINT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, POINT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, POINT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _FlowGrapher.POINT_x_set
    __swig_getmethods__["x"] = _FlowGrapher.POINT_x_get
    if _newclass:x = _swig_property(_FlowGrapher.POINT_x_get, _FlowGrapher.POINT_x_set)
    __swig_setmethods__["y"] = _FlowGrapher.POINT_y_set
    __swig_getmethods__["y"] = _FlowGrapher.POINT_y_get
    if _newclass:y = _swig_property(_FlowGrapher.POINT_y_get, _FlowGrapher.POINT_y_set)
    def __init__(self): 
        this = _FlowGrapher.new_POINT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FlowGrapher.delete_POINT
    __del__ = lambda self : None;
POINT_swigregister = _FlowGrapher.POINT_swigregister
POINT_swigregister(POINT)

class DrawingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawingInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _FlowGrapher.DrawingInfo_address_set
    __swig_getmethods__["address"] = _FlowGrapher.DrawingInfo_address_get
    if _newclass:address = _swig_property(_FlowGrapher.DrawingInfo_address_get, _FlowGrapher.DrawingInfo_address_set)
    __swig_setmethods__["type"] = _FlowGrapher.DrawingInfo_type_set
    __swig_getmethods__["type"] = _FlowGrapher.DrawingInfo_type_get
    if _newclass:type = _swig_property(_FlowGrapher.DrawingInfo_type_get, _FlowGrapher.DrawingInfo_type_set)
    __swig_setmethods__["subtype"] = _FlowGrapher.DrawingInfo_subtype_set
    __swig_getmethods__["subtype"] = _FlowGrapher.DrawingInfo_subtype_get
    if _newclass:subtype = _swig_property(_FlowGrapher.DrawingInfo_subtype_get, _FlowGrapher.DrawingInfo_subtype_set)
    __swig_setmethods__["count"] = _FlowGrapher.DrawingInfo_count_set
    __swig_getmethods__["count"] = _FlowGrapher.DrawingInfo_count_get
    if _newclass:count = _swig_property(_FlowGrapher.DrawingInfo_count_get, _FlowGrapher.DrawingInfo_count_set)
    __swig_setmethods__["points"] = _FlowGrapher.DrawingInfo_points_set
    __swig_getmethods__["points"] = _FlowGrapher.DrawingInfo_points_get
    if _newclass:points = _swig_property(_FlowGrapher.DrawingInfo_points_get, _FlowGrapher.DrawingInfo_points_set)
    __swig_setmethods__["text"] = _FlowGrapher.DrawingInfo_text_set
    __swig_getmethods__["text"] = _FlowGrapher.DrawingInfo_text_get
    if _newclass:text = _swig_property(_FlowGrapher.DrawingInfo_text_get, _FlowGrapher.DrawingInfo_text_set)
    __swig_setmethods__["size"] = _FlowGrapher.DrawingInfo_size_set
    __swig_getmethods__["size"] = _FlowGrapher.DrawingInfo_size_get
    if _newclass:size = _swig_property(_FlowGrapher.DrawingInfo_size_get, _FlowGrapher.DrawingInfo_size_set)
    def GetPoint(self, *args): return _FlowGrapher.DrawingInfo_GetPoint(self, *args)
    def __init__(self): 
        this = _FlowGrapher.new_DrawingInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FlowGrapher.delete_DrawingInfo
    __del__ = lambda self : None;
DrawingInfo_swigregister = _FlowGrapher.DrawingInfo_swigregister
DrawingInfo_swigregister(DrawingInfo)

class FlowGrapher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowGrapher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowGrapher, name)
    __repr__ = _swig_repr
    def SetNodeShape(self, fontcolor=None, fillcolor=None, fontname="Verdana", fontsize="18"): return _FlowGrapher.FlowGrapher_SetNodeShape(self, fontcolor, fillcolor, fontname, fontsize)
    def AddNode(self, *args): return _FlowGrapher.FlowGrapher_AddNode(self, *args)
    def AddLink(self, *args): return _FlowGrapher.FlowGrapher_AddLink(self, *args)
    def RenderToFile(self, *args): return _FlowGrapher.FlowGrapher_RenderToFile(self, *args)
    def GenerateDrawingInfo(self): return _FlowGrapher.FlowGrapher_GenerateDrawingInfo(self)
    def GetDrawingInfoLength(self): return _FlowGrapher.FlowGrapher_GetDrawingInfoLength(self)
    def GetDrawingInfoMember(self, *args): return _FlowGrapher.FlowGrapher_GetDrawingInfoMember(self, *args)
    def __init__(self): 
        this = _FlowGrapher.new_FlowGrapher()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FlowGrapher.delete_FlowGrapher
    __del__ = lambda self : None;
FlowGrapher_swigregister = _FlowGrapher.FlowGrapher_swigregister
FlowGrapher_swigregister(FlowGrapher)

# This file is compatible with both classic and new-style classes.


